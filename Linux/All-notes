
#LS COMMAND
ls (displays all files)
ls -l (more detailed ls)
ls --help
clear
ls --all / ls -a (same thing)
ls -l --all / ls -l -a / ls -la (same  thing)
-
MAN COMMAND ("manual" page)
man ls (displays all parameters with detailed definition)

PWD (print working directory)
tells you what folder/directory you are in

CD (change directory)
cd Documents

touch (to create a new file) (refrain from using spaces, use underscore)
touch jans.txt
touch long_name_of_jansen.txt

nano (to open files)
nano l [tab] (tab to automatically fill in text)
Control X to finish/Exit 
^ = Control Key 

mkdir (make directory)
mkdir test 
ls -l

rm (remove file)
rm -r (delete folder/directory with prompt)
rm -rf (delete folder/directory with no prompt)

Type cygdrive64 in search bar
cd /cygdrive/m (Show all folders and files)
touch ivan.txt
rm ivan.txt

mkdir Linux

cd .. (go back one folder)

cat [name of file] (displays everything inside the file)

for((i = 0; i < 10; i++)); do touch file$i.doc; done

mv file1.doc something_else.doc (rename the file)
mv file2.doc ../ (moved to the above folder)

rmdir (will remove folder if folder is empty)

ln (file) (new file)
- Copies the contents of file into the new file

ln -s file.txt link.txt
- Links ln command that is used for linking files and directories to each other. ln command allows any number of new names to be created, all pointing to the same file or directory. You can then use any of these names to operate with the original file's data.
- meaning if u delete file.txt, the content in link.txt will also get deleted.

pwd - display your current location or working directory
  - print working directory
04/09/2024

less (Like cat but better)
   - cat prints all in the file
    - less only prints that fits on the first page (shows less)
head -10 words.txt (prints 10 words)
tail -15 words.txt (prints the last 15 words)
wc words.txt (word count)
  - how many lines, words, characters (in order)

| - called as a pipeline, like modifies.

grep a sentences.txt
  - print all words that has the letter a in sentences.txt
  - case sensitive meaning if what you capitalize, it will also follow.

grep do sentences.txt | grep you
  - prints all words that has do you regardless if it has a "-".

ls -la *.conf
  - shows all the file that has .conf

Regular Expressions
[a-z]
  - finds the words with atleast 1 of a to z letters in the word.
[a-z]{6,10]
  - From A to z from the characters that has 6 characters and then if it reach 10 characters then it highlights or chooses that.
[^abc]
  - anything aside a,b and c.
^ 
  - start of the string
$
  - end of the string
[A-z0-9]+.(jpg|png|bmp|svg)
- finds the words that has A-z (capital or not), with numbers or not +. that is a jpeg,png, bmp or svg file.
[A-z0-9_-]+@[a-z]+.+
- finds the email address wether it be @domain.com or @usc.edu.ph

9/7/2024
history 
   - shows all history of commands executed.
!-n
- executes the nTH command from the bottom of the history list
date
- shows the date today
cal 8 2025
- shows the 8th month (august) and the corresponding days in 2025.
!!
- executes the most recent command
!cal
- execute the most recent iteration of a specific command (for example cal 8 2025 was called earlier, so it will execute that automatically).

Local variables
- exists only in the shell/terminal, if closed all variables get deleted.
example
variable1='Something'
The echo command is used to display output in the terminal. 
To display the value of the variable, use a dollar sign $ character followed by the variable name as an argument to the echo command:
echo $variable1 
- this would output Something

The type command can be used to determine information about command type.
- type command
- internal commands
  - builtin commands in the shell itself.
- external commands
  - The which command searches for the location of a command by searching the PATH variable.
  - which nano
    - output should be where the nano command is

alias
- make longer commands shorter
- example: ls -l is shorted with ll or l

Functions
you can also create functions
- more advanced thn the alias
function_name () 
{
   commands
}
- used to execute a set of commands at once

Quoting
glob charcters
- wildcards
- *, ?, []
- double quotes 
  - asterisk is just an asterisk, a question mark is just a question mark, and so on, which is useful when you want to display something on the screen that is normally a special character to the shell.
  - Double quotes still allow for command substitution, variable substitution, and permit some other shell metacharacters
- single quotes
  - prevent the shell from doing any interpreting of special characters, including globs, variables, command substitution and other metacharacters
  - For example, to make the $ character simply mean a $, rather than it acting as an indicator to the shell to look for the value of a variable, execute the second command displayed below:
sysadmin@localhost:~$ echo The car costs $100                           
The car costs 00                                                        
sysadmin@localhost:~$ echo 'The car costs $100'                        
The car costs $100
- Backlash
  - doubleqoutes, $1 and $PATH are considered as variables which means placing them in a double qoutes would execeute them
  - inside a single quote, they are not considered as variables so they just printout the way they are.
  - say you want $PATH treated as a virable and $1 not. You can use a \ or backslash
sysadmin@localhost:~$ echo The service costs \$1 and the path is $PATH
The service costs $1 and the path is /usr/bin/custom:/home/sysadmin/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

backquotes
- used to specify a command within a commnd called command subsitution
- say u want to display date
sysadmin@localhost:~$ echo Today is date                               
Today is date
- with the use of backquotes:
sysadmin@localhost:~$ echo Today is `date`                         
Today is Mon Nov 4 03:40:04 UTC 2018

Control statements
semicolon
- used to run multiple commands one after the other.
- cal 1 2023; cal 2 2023; cal 3 2023 would display those 3 months in their respective years.
double ampersand 
- command1 && command2
- logical and if first command successful then second should
- if first does not run then also the second
double pipe
- command1 || command2
- if first command runs successfully, second command is skipped
- if first command fails then the second command is run.
- either run this first command or run the second one.

18/09/2024

chmod - persmisisons
rwx rwx rwx
421 421 421

TAR //tgz

20/09/2024

locate 
-  searches a database of all files and directories that were on the system when the database was created
- finds any file or directory.
- easy way to search for a file
locate -c 
- finds out how many files match
locate -b
- only includes listing that have the search term in the basename of the ffilename
  - The basename is the portion of the filename not including the directory names.
locate -c -b passwd
- still many results
to limit further... limit
locate -b "\passwd"

man -f psswd 
- displays man pages that match or partially match, a name or section, for example there are three commands with the passwd command
- is equal to the whatis command
man -f copy
- man page that isplayes how to copy directories.
- searches both the names and descriptions of man  

info command
- provides documentation on operating system commands and features

--help
- basic information, useful to learn the basic usage of a command quickly without leaving the cli

9/20/2024
tar xzvf <zipfolder>.tgz          tgz => tar

find -name test      => finds a file that contains word "test"

find -name take | wc -l       => counts files that contains word take

find -type l   => l - link  d => directory   f => file

find -type d -empty  => finds directory that are empty

find -type d -empty | wc -l   =>  counts empty directories

find -type d -empty -exec rmdir {} \;  => " \; " end of command "{}" variable     // delets all the empty directories

joe => write something on a file (same with nano)


find -type f -perm 755      => finds the permission that has 755 (chmod)

find -type f -exec   wc -l {} \;         => counts the lines on a file

^^^^^^^^ | sort         => sorts lexographically  add -n for number


find -type f -exec wc -l {} \; | sort -n | tail -1  =>  prints the last longest line

du -s test     => prints the highest disk usage in kilobytes of the folder    (add b beside s for bytes)   


find -type d -exec du -s {} \;       => finds the directories with bytes printed

find -type f -exec file {} \; | grep -v "ASCII text"        => prints non ASCII text (-v) is negation

tr 'a-z' 'A-Z' < words.txt          => (transalate) converts small letters to bigletters inside of the words.txt

tr 'a-z' 'A-Z' < words.txt > file.txt       => transfers translated words.txt to file.txt

bc -l        =>calculator
